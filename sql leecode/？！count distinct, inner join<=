#Rank Scores
#Write a SQL query to rank scores. If there is a tie between two scores, 
#both should have the same ranking. Note that after a tie, the next ranking number 
#should be the next consecutive integer value. In other words, there should 
#be no "holes" between ranks.

#+----+-------+
#| Id | Score |
#+----+-------+
#| 1  | 3.50  |
#| 2  | 3.65  |
#| 3  | 4.00  |
#| 4  | 3.85  |
#| 5  | 4.00  |
#| 6  | 3.65  |
#+----+-------+
#For example, given the above Scores table, your query should generate 
#the following report (order by highest score):

#+-------+------+
#| Score | Rank |
#+-------+------+
#| 4.00  | 1    |
#| 4.00  | 1    |
#| 3.85  | 2    |
#| 3.65  | 3    |
#| 3.65  | 3    |
#| 3.50  | 4    |
#+-------+------+

use test_one;

CREATE TABLE Scores (
  Id int NOT NULL,
  score float(5) NOT NULL,
  primary key (Id)
);

INSERT INTO Scores 
    (Id,score) 
VALUES 
	(1,3.50),
	(2,3.65),
    (3,4.00),
    (4,3.85),
    (5,4.00),
    (6,3.65);

select * from Scores;

select s1.Score,count(distinct s2.Score) as "Rank"   #!!!
from Scores as s1 inner join Scores as s2
on s1.Score <= s2.Score   #!!!
group by s1.Id   #GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。!!!
order by s1.Score desc;

#???
#inner join:
#s1   s2   rank:
#3.5   3.5,3.65,4,3.85   4
#3.65   4,3.85,3.65   3
#4   4   1
#3.85   4,3.85   2
#4   4   1
#3.65   4,3.85,3.65   3
